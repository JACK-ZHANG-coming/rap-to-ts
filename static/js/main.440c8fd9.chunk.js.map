{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","nowString","setNowString","tsString","setTsString","onClick","value","console","log","temp","formattingTs","e","JSON","parse","err","temp1","temp2","properties","map","item","rows","cols","name","onChange","target","type","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6KA4EeA,MA1Ef,WACE,MAA+BC,mBAAS,IAAxC,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAA6BF,mBAAS,IAAtC,mBAAOG,EAAP,KAAgBC,EAAhB,KAEMC,EAAQ,SAACC,GACbC,QAAQC,IAAI,aAAaP,GACzB,IAAIQ,EAAOC,EAAaT,EAAUK,GAClCF,EAAYK,GACZF,QAAQC,IAAI,YAAYC,EAAKH,IAazBI,EAAa,SAACC,EAAEL,GACpB,IAAIG,EAAM,GACVA,EAAME,EACN,IACEF,EAAOG,KAAKC,MAAMF,GAEpB,MAAMG,GAGF,OAFAP,QAAQC,IAAI,qCACZC,EAAO,IAGXA,EAAOG,KAAKC,MAAMF,GAClBJ,QAAQC,IAAI,cAAcC,EAAKA,GAC/B,IAAIM,EAAM,mEACNC,EAAM,iFAwBV,OAvBAP,EAAKQ,WAAWC,KAAI,SAACC,GAiBnB,MAhBmB,YAAhBA,EAAI,QACa,WAAfA,EAAI,OACLJ,GAAO,KAAF,OAAOI,EAAI,KAAX,wBAAmCA,EAAI,YAAvC,OACW,WAAfA,EAAI,OACLJ,GAAO,KAAF,OAAOI,EAAI,KAAX,wBAAmCA,EAAI,YAAvC,OACW,YAAfA,EAAI,OACLJ,GAAO,KAAF,OAAOI,EAAI,KAAX,yBAAoCA,EAAI,YAAxC,QAEU,aAAhBA,EAAI,QACa,WAAfA,EAAI,OACLH,GAAO,KAAF,OAAOG,EAAI,KAAX,wBAAmCA,EAAI,YAAvC,OACW,WAAfA,EAAI,OACLH,GAAO,KAAF,OAAOG,EAAI,KAAX,wBAAmCA,EAAI,YAAvC,OACW,YAAfA,EAAI,OACLH,GAAO,KAAF,OAAOG,EAAI,KAAX,yBAAoCA,EAAI,YAAxC,QAEF,KAETJ,GAAO,MACPC,GAAO,MACPT,QAAQC,IAAIO,GACZR,QAAQC,IAAIQ,GACG,IAARV,EAAUS,EAAMC,GAEzB,OACE,qCACA,mGACA,gCACE,0BAAUI,KAAK,KAAKC,KAAK,KAAKf,MAAOL,EAAWqB,KAAK,SAASC,SAjDnD,SAACZ,GACdT,EAAaS,EAAEa,OAAOlB,UAiDpB,0BAAUc,KAAK,KAAKC,KAAK,KAAKf,MAAOH,EAAUmB,KAAK,SAASC,SAvDjD,eAwDZ,wBAAQE,KAAK,GAAGpB,QAAS,WAAKA,EAAQ,IAAtC,kDACA,wBAAQoB,KAAK,GAAGpB,QAAS,WAAKA,EAAQ,IAAtC,qEC1DSqB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.440c8fd9.chunk.js","sourcesContent":["import React, { useState} from 'react';\r\n\r\nfunction App() {\r\n  const [nowString,setNowString]=useState('');\r\n  const [tsString,setTsString]=useState('');\r\n  // value 表示要转的形式 1表示rap转ts入参; 2表示rap转ts响应参数；\r\n  const onClick=(value)=>{\r\n    console.log(\"nowString:\",nowString);\r\n    let temp = formattingTs(nowString,value);\r\n    setTsString(temp);\r\n    console.log(\"tsString:\",temp,value);\r\n  }\r\n\r\n  const onChange2=()=>{\r\n\r\n  }\r\n\r\n  //自动写入当前输入框的值\r\n  const onChange=(e)=>{\r\n    setNowString(e.target.value)\r\n  }\r\n\r\n  // 对传入的对象字符串进行格式化处理\r\n  const formattingTs=(e,value)=>{\r\n    let temp ={};\r\n    temp =e;\r\n    try {\r\n      temp = JSON.parse(e);\r\n    }\r\n    catch(err) {\r\n        console.log(\"json格式错误\")\r\n        temp = {}\r\n        return\r\n    }\r\n    temp = JSON.parse(e);\r\n    console.log(\"temp\",typeof temp,temp);\r\n    let temp1='// IsRequestName入参\\nexport interface IsRequestName {\\n';  //入参\r\n    let temp2='// IsResponseName响应参数\\nexport interface IsResponseName {\\n'; // 响应参数\r\n    temp.properties.map((item)=>{\r\n      if(item['scope']===\"request\"){\r\n        if(item['type']==='String')\r\n          temp1+=`  ${item['name']}?: string,// ${item['description']}\\n`;\r\n        if(item['type']==='Number')\r\n          temp1+=`  ${item['name']}?: number,// ${item['description']}\\n`;\r\n        if(item['type']==='Boolean')\r\n          temp1+=`  ${item['name']}?: boolean,// ${item['description']}\\n`;\r\n      }\r\n      if(item['scope']===\"response\"){\r\n        if(item['type']==='String')\r\n          temp2+=`  ${item['name']}?: string,// ${item['description']}\\n`;\r\n        if(item['type']==='Number')\r\n          temp2+=`  ${item['name']}?: number,// ${item['description']}\\n`;\r\n        if(item['type']==='Boolean')\r\n          temp2+=`  ${item['name']}?: boolean,// ${item['description']}\\n`;\r\n      }\r\n      return 0\r\n    })\r\n    temp1+='}\\n';\r\n    temp2+='}\\n';\r\n    console.log(temp1)\r\n    console.log(temp2)\r\n    return value===1?temp1:temp2;\r\n  }\r\n  return (\r\n    <>\r\n    <h2>简易的rap参数转ts格式工具</h2>\r\n    <div>\r\n      <textarea rows=\"30\" cols=\"50\" value={nowString} name='value1' onChange={onChange}></textarea>\r\n      <textarea rows=\"30\" cols=\"50\" value={tsString} name='value2' onChange={onChange2}></textarea>\r\n      <button type=\"\" onClick={()=>{onClick(1)}}>点击转换入参</button>\r\n      <button type=\"\" onClick={()=>{onClick(2)}}>点击转换返回参数</button>\r\n    </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}