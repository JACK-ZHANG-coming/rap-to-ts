{"version":3,"sources":["App.js","index.js"],"names":["App","useState","nowString","setNowString","tsString","setTsString","onClick","value","temp","formattingTs","e","JSON","parse","err","alert","console","log","temp1","itf","name","url","split","pop","temp2","properties","map","item","className","rows","cols","onChange","target","type","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0MAiGeA,MA9Ff,WACE,MAAkCC,mBAAS,IAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAgCF,mBAAS,IAAzC,mBAAOG,EAAP,KAAiBC,EAAjB,KAEMC,EAAU,SAACC,GAEf,IAAIC,EAAOC,EAAaP,EAAWK,GACnCF,EAAYG,IAcRC,EAAe,SAACC,EAAGH,GAAW,IAAD,wBAC7BC,EAAO,GACXA,EAAOE,EACP,IACEF,EAAOG,KAAKC,MAAMF,GAEpB,MAAOG,GAGL,OAFAC,MAAM,qCACNN,EAAO,IAGTA,EAAOG,KAAKC,MAAMF,GAClBK,QAAQC,IAAI,cAAeR,EAAMA,GACjC,IAAIS,EAAK,iCAAST,SAAT,iBAAS,EAAMU,WAAf,aAAS,EAAWC,YAApB,QAA4B,aAA5B,+DAAiEX,SAAjE,iBAAiE,EAAMU,WAAvE,aAAiE,EAAWE,IAAIC,MAAM,KAAKC,aAA3F,QAAoG,OAApG,cACLC,EAAK,iCAASf,SAAT,iBAAS,EAAMU,WAAf,aAAS,EAAWC,YAApB,QAA4B,WAA5B,2EAAiEX,SAAjE,iBAAiE,EAAMU,WAAvE,aAAiE,EAAWE,IAAIC,MAAM,KAAKC,aAA3F,QAAoG,OAApG,YAgCT,OA/BAd,EAAKgB,WAAWC,KAAI,SAACC,GAyBnB,MAxBsB,YAAlBA,EAAI,QACe,WAAjBA,EAAI,KACNT,GAAK,YAASS,EAAI,KAAb,wBAAqCA,EAAI,YAAzC,MACmB,WAAjBA,EAAI,KACXT,GAAK,YAASS,EAAI,KAAb,wBAAqCA,EAAI,YAAzC,MACmB,YAAjBA,EAAI,KACXT,GAAK,YAASS,EAAI,KAAb,yBAAsCA,EAAI,YAA1C,MAGLT,GAAK,YAASS,EAAI,KAAb,qBAAkCA,EAAI,YAAtC,OAGa,aAAlBA,EAAI,QACe,WAAjBA,EAAI,KACNH,GAAK,YAASG,EAAI,KAAb,wBAAqCA,EAAI,YAAzC,MACmB,WAAjBA,EAAI,KACXH,GAAK,YAASG,EAAI,KAAb,wBAAqCA,EAAI,YAAzC,MACmB,YAAjBA,EAAI,KACXH,GAAK,YAASG,EAAI,KAAb,yBAAsCA,EAAI,YAA1C,MAGLH,GAAK,YAASG,EAAI,KAAb,qBAAkCA,EAAI,YAAtC,OAGF,KAETT,GAAS,MACTM,GAAS,MAGQ,IAAVhB,EAAcU,EAAQM,GAI/B,OACE,mCACE,sBAAKI,UAAU,WAAf,UACE,mGACA,sBAAKA,UAAU,cAAf,UACE,sBAAKA,UAAU,oBAAf,UACE,wGACA,oFAEF,sBAAKA,UAAU,mBAAf,UACE,0BAAUC,KAAK,KAAKC,KAAK,KAAKtB,MAAOL,EAAWiB,KAAK,SAASW,SAjEvD,SAACpB,GAChBP,EAAaO,EAAEqB,OAAOxB,UAiEd,0BAAUqB,KAAK,KAAKC,KAAK,KAAKtB,MAAOH,EAAUe,KAAK,SAASW,SAvErD,qBA0EZ,sBAAKH,UAAU,aAAf,UACE,wBAAQK,KAAK,GAAG1B,QAAS,WAAQA,EAAQ,IAAzC,kDACA,wBAAQ0B,KAAK,GAAG1B,QAAS,WAAQA,EAAQ,IAAzC,uECrFV2B,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.2665086c.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport './App.less';\r\n\r\nfunction App() {\r\n  const [nowString, setNowString] = useState('');\r\n  const [tsString, setTsString] = useState('');\r\n  // value 表示要转的形式 1表示rap转ts入参; 2表示rap转ts响应参数；\r\n  const onClick = (value) => {\r\n    // console.log(\"nowString:\", nowString);\r\n    let temp = formattingTs(nowString, value);\r\n    setTsString(temp);\r\n    // console.log(\"tsString:\", temp, value);\r\n  }\r\n\r\n  const onChange2 = () => {\r\n\r\n  }\r\n\r\n  //自动写入当前输入框的值\r\n  const onChange = (e) => {\r\n    setNowString(e.target.value)\r\n  }\r\n\r\n  // 对传入的对象字符串进行格式化处理\r\n  const formattingTs = (e, value) => {\r\n    let temp = {};\r\n    temp = e;\r\n    try {\r\n      temp = JSON.parse(e);\r\n    }\r\n    catch (err) {\r\n      alert(\"json格式错误\");\r\n      temp = {}\r\n      return\r\n    }\r\n    temp = JSON.parse(e);\r\n    console.log(\"temp\", typeof temp, temp);\r\n    let temp1 = `// ${temp?.itf?.name ?? 'NameParams'} 入参\\nexport interface ${temp?.itf?.url.split('/').pop() ?? 'Name'}Params {\\n`;  // 入参\r\n    let temp2 = `// ${temp?.itf?.name ?? 'NameItem'} 响应参数\\nexport interface ${temp?.itf?.url.split('/').pop() ?? 'Name'}Item {\\n`; // 响应参数\r\n    temp.properties.map((item) => {\r\n      if (item['scope'] === \"request\") {\r\n        if (item['type'] === 'String')\r\n          temp1 += `  ${item['name']}?: string;// ${item['description']}\\n`;\r\n        else if (item['type'] === 'Number')\r\n          temp1 += `  ${item['name']}?: number;// ${item['description']}\\n`;\r\n        else if (item['type'] === 'Boolean')\r\n          temp1 += `  ${item['name']}?: boolean;// ${item['description']}\\n`;\r\n        // 当为引用类型（Object,Array这种）时目前是给的any -待改进\r\n        else {\r\n          temp1 += `  ${item['name']}?: any;// ${item['description']}\\n`;\r\n        }\r\n      }\r\n      if (item['scope'] === \"response\") {\r\n        if (item['type'] === 'String')\r\n          temp2 += `  ${item['name']}?: string;// ${item['description']}\\n`;\r\n        else if (item['type'] === 'Number')\r\n          temp2 += `  ${item['name']}?: number;// ${item['description']}\\n`;\r\n        else if (item['type'] === 'Boolean')\r\n          temp2 += `  ${item['name']}?: boolean;// ${item['description']}\\n`;\r\n        // 当为引用类型（Object,Array这种）时目前是给的any -待改进\r\n        else {\r\n          temp2 += `  ${item['name']}?: any;// ${item['description']}\\n`;\r\n        }\r\n      }\r\n      return 0\r\n    })\r\n    temp1 += '}\\n';\r\n    temp2 += '}\\n';\r\n    // console.log(temp1)\r\n    // console.log(temp2)\r\n    return value === 1 ? temp1 : temp2;\r\n  }\r\n\r\n\r\n  return (\r\n    <>\r\n      <div className=\"rap-body\">\r\n        <h2>简易的rap参数转ts格式工具</h2>\r\n        <div className=\"rap-content\">\r\n          <div className=\"rap-content-title\">\r\n            <div>&nbsp;&nbsp;转换前rap导出的json内容：</div>\r\n            <div>&nbsp;&nbsp;转后的ts格式：</div>\r\n          </div>\r\n          <div className=\"rap-content-body\">\r\n            <textarea rows=\"30\" cols=\"50\" value={nowString} name='value1' onChange={onChange}></textarea>\r\n            <textarea rows=\"30\" cols=\"50\" value={tsString} name='value2' onChange={onChange2}></textarea>\r\n          </div>\r\n        </div>\r\n        <div className=\"rap-button\">\r\n          <button type=\"\" onClick={() => { onClick(1) }}>点击转换入参</button>\r\n          <button type=\"\" onClick={() => { onClick(2) }}>点击转换返回参数</button>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}